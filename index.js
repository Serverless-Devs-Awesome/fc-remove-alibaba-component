const { Component } = require('@serverless-devs/s-core');
const getHelp = require('./utils/help');

const FcResource = require('./utils/resource/fc');

class FcComponent extends Component {
  constructor() {
    super();
  }

  async remove (inputs) {
    this.help(inputs, getHelp(inputs))

    // 处理参数
    const {
      Properties: properties = {},
      Credentials: credentials = {}
    } = inputs;
    const {
      Region: region,
      Service: serviceProp = {},
      Function: functionProp = {}
    } = properties;
    const serviceName = serviceProp.Name;
    const functionName = functionProp.Name;

    const { Commands: commands, Parameters: parameters } = this.args(inputs.Args, ['-f, --force']);
    const removeType = commands[0];

    let isRemoveAll = false;
    if (commands.length === 0) {
      isRemoveAll = true;
    }

    const fcResource = new FcResource(credentials, region)

    // 解绑标签
    if (removeType === 'tags' || isRemoveAll) {
      // TODO 指定删除标签
      const serviceArn = 'services/' + serviceName
      await fcResource.removeTags(serviceArn, parameters)
    }

    // if (removeType === 'domain' || isRemoveAll) {
    //   await this.domain(inputs, true)
    // }

    // 单独删除触发器
    if (removeType === 'trigger' || isRemoveAll) {
      // TODO 指定删除特定触发器
      await fcResource.removeTrigger(serviceName, functionName, parameters);
    }

    // 单独删除函数
    if (removeType === 'function' || isRemoveAll) {
      await fcResource.removeFunction(serviceName, functionName);
    }

    // 单独删除服务
    // TODO 服务是全局的，当前组件如何判断是否要删除服务？
    if (removeType === 'service' || isRemoveAll) {
      await fcResource.removeService(serviceName)
    }


    // const fcRemove = new Remove(commands, parameters, { credentials, region, serviceProp });
    // // 单独删除服务
    // // TODO 服务是全局的，当前组件如何判断是否要删除服务？
    // if (removeType === 'service' || isRemoveAll) {
    //   // Check if NAS auto enabled, if so remove nas-server function if possible
    //   if (serviceProp && serviceProp.Nas) {
    //     await fcRemove.removeNasFunctionIfExists(serviceName)
    //   }

    //   const fcService = new Service(commands, parameters, {credentials, region})
    //   await fcService.remove(serviceName)
    // }

    // // Try to delete auto generated resource
    // if (isRemoveAll) {
    //   await fcRemove.removeAutoGeneratedResourceIfExists()
    // }
  }
}

module.exports = FcComponent;